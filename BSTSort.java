package BST;

class Node {
    int key;
    Node left, right, parent;

    public Node(int item) {
        key = item;
        left = right = parent = null;
    }
}

public class BSTSort {
    static int comparisons = 0;

    Node root;

    BSTSort() {
        root = null;
    }

    void insert(int key) {
        root = insertRec(root, key);
    }

    Node insertRec(Node root, int key) {
        comparisons++;
        if (root == null) {
            root = new Node(key);
            return root;
        }

        if (key < root.key)
            root.left = insertRec(root.left, key);
        else if (key > root.key)
            root.right = insertRec(root.right, key);

        return root;
    }

    void inorder() {
        inorderRec(root);
    }

    void inorderRec(Node root) {
        if (root != null) {
            inorderRec(root.left);
            System.out.print(root.key + " "); // Print the node when traversed
            inorderRec(root.right);
        }
    }

    public static void main(String[] args) {
        BSTSort tree = new BSTSort();

        System.out.println("(1) Distinct numbers in ascending order");
        for (int size : new int[]{100, 1000, 10000}) {
            int[] ascending = new int[size];
            index = 0; // Reset index before generating new array
            fillArray(ascending, 0, ascending.length - 1);
            tree.sortAndCount(ascending, size);
        }

        System.out.println("\n(2) Distinct numbers in descending order");
        for (int size : new int[]{100, 1000, 10000}) {
            int[] descending = new int[size];
            index = 0; // Reset index before generating new array
            fillDescendingArray(descending, descending.length);
            tree.sortAndCount(descending, size);
        }

        System.out.println("\n(3) Random numbers between 1 and 100,000, inclusive");
        for (int size : new int[]{100, 1000, 10000}) {
            int[] random = new int[size];
            index = 0; // Reset index before generating new array
            fillRandomArray(random, random.length);
            tree.sortAndCount(random, size);
        }

        System.out.println("\n(4) Generated by calling fillArray(arr, 0, n - 1)");
        for (int size : new int[]{100, 1000, 10000}) {
            int[] generated = new int[size];
            index = 0; // Reset index before generating new array
            fillArray(generated, 0, generated.length - 1);
            tree.sortAndCount(generated, size);
        }
    }

    private static int index = 0;
    public static void fillArray(int[] arr, int low, int high) {
    if (low <= high) {
    int mid = (low + high) / 2;
    arr[index++] = mid + 1;
    fillArray(arr, low, mid - 1);
    fillArray(arr, mid + 1, high);
    }
    }


    public static void fillDescendingArray(int[] arr, int size) {
        int value = size;
        for (int i = 0; i < size; i++) {
            arr[i] = value--;
        }
    }

    public static void fillRandomArray(int[] arr, int size) {
        for (int i = 0; i < size; i++) {
            arr[i] = (int) (Math.random() * 100000) + 1;
        }
    }

    void sortAndCount(int[] arr, int size) {
        comparisons = 0;
        root = null;
        for (int i : arr) {
            insert(i);
        }
        System.out.println("Size n: " + size + "\t# of KCs: " + comparisons);

        // Convert the BST to an array for comparison
        int[] sortedArray = new int[size];
        index = 0;
        inorderRec(root, sortedArray);

        // Print the first  20 elements of the input array and the sorted array
        System.out.print("Input: ");
        for (int i = 0; i < Math.min(20, size); i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();

        System.out.print("Sorted: ");
        for (int i = 0; i < Math.min(20, size); i++) {
            System.out.print(sortedArray[i] + " ");
        }
        System.out.println();
    }

    void inorderRec(Node root, int[] sortedArray) {
        if (root != null) {
            inorderRec(root.left, sortedArray);
            sortedArray[index++] = root.key;
            inorderRec(root.right, sortedArray);
        }
    }
}
